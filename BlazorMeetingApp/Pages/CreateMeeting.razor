@page "/create-meeting"
@inject IHttpClientFactory ClientFactory
@inject NavigationManager NavigationManager
@using System.ComponentModel.DataAnnotations

<h3>Create a New Meeting</h3>

<EditForm Model="newMeeting" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label>Organizer Email:</label>
        <InputText @bind-Value="newMeeting.OrganizerEmail" class="form-control" />
        <ValidationMessage For="@(() => newMeeting.OrganizerEmail)" />
    </div>

    <div class="form-group">
        <label>Title:</label>
        <InputText @bind-Value="newMeeting.Title" class="form-control" />
        <ValidationMessage For="@(() => newMeeting.Title)" />
    </div>

    <div class="form-group">
        <label>Description:</label>
        <InputText @bind-Value="newMeeting.Description" class="form-control" />
        <ValidationMessage For="@(() => newMeeting.Description)" />
    </div>

    <div class="form-group">
        <label>Date:</label>
        <InputDate @bind-Value="newMeeting.Date" class="form-control" />
        <ValidationMessage For="@(() => newMeeting.Date)" />
    </div>

    <div class="form-group">
        <label>Time:</label>
        <InputText @bind-Value="newMeeting.Time" class="form-control" />
        <ValidationMessage For="@(() => newMeeting.Time)" />
    </div>

    <div class="form-group">
        <label>Invitees (Email Addresses):</label>
        <InputText @bind-Value="newInviteeEmail" class="form-control" />
        <ValidationMessage For="@(() => newInviteeEmail)" />
        <button type="button" @onclick="AddInvitee" class="btn btn-secondary mt-2">Add Email</button>
    </div>

    <ul>
        @foreach (var invitee in newMeeting.Invitees)
        {
            <li>@invitee.Email</li>
        }
    </ul>

    <button type="submit" class="btn btn-primary">Create Meeting</button>
</EditForm>

@code {
    private Meeting newMeeting = new Meeting();
    private string newInviteeEmail;

    protected override void OnInitialized()
    {
        newMeeting.Date = DateTime.Today;
        newMeeting.Time = "10:00";
    }

    private void AddInvitee()
    {
        if (!string.IsNullOrEmpty(newInviteeEmail))
        {
            var invitee = new Invitee { Email = newInviteeEmail };

            // Provjeravamo ispravnost unosa email-a prije dodavanja
            var validationContext = new ValidationContext(invitee);
            var validationResults = new List<ValidationResult>();

            if (Validator.TryValidateObject(invitee, validationContext, validationResults, true))
            {
                newMeeting.Invitees.Add(invitee);
                newInviteeEmail = string.Empty;
            }
            else
            {
                // Obrada pogrešaka ako email nije valjan (može se prilagoditi za prikaz grešaka)
            }
        }
    }

    private async Task HandleValidSubmit()
    {
        var client = ClientFactory.CreateClient("MeetingApi");
        var response = await client.PostAsJsonAsync("api/meetings", newMeeting);

        if (response.IsSuccessStatusCode)
        {
            NavigationManager.NavigateTo("/meetings");
        }
        else
        {
            // Obrada pogreške
        }
    }

    public class Meeting : IValidatableObject
    {
        [Required(ErrorMessage = "Email organizatora je obavezan.")]
        [EmailAddress(ErrorMessage = "Neispravna email adresa.")]
        public string OrganizerEmail { get; set; }

        [Required(ErrorMessage = "Naslov sastanka je obavezan.")]
        [StringLength(100, ErrorMessage = "Naslov ne smije biti dulji od 100 znakova.")]
        public string Title { get; set; }

        [Required(ErrorMessage = "Opis sastanka je obavezan.")]
        public string Description { get; set; }

        [Required(ErrorMessage = "Datum sastanka je obavezan.")]
        public DateTime Date { get; set; }

        [Required(ErrorMessage = "Vrijeme sastanka je obavezno.")]
        public string Time { get; set; }

        [MinLength(1, ErrorMessage = "Morate pozvati barem jednog sudionika.")]
        public List<Invitee> Invitees { get; set; } = new List<Invitee>();

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        {
            var currentDateTime = DateTime.Now;
            var meetingDateTime = Date.Add(TimeSpan.Parse(Time));

            if (meetingDateTime < currentDateTime)
            {
                yield return new ValidationResult("Datum i vrijeme sastanka moraju biti u budućnosti.", new[] { nameof(Date), nameof(Time) });
            }
        }
    }

    public class Invitee
    {
        [Required(ErrorMessage = "Email sudionika je obavezan.")]
        [EmailAddress(ErrorMessage = "Neispravna email adresa.")]
        public string Email { get; set; }
    }
}
