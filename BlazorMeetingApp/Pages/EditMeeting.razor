@page "/edit-meeting/{id:int}"
@inject IHttpClientFactory ClientFactory
@inject NavigationManager NavigationManager
@using System.ComponentModel.DataAnnotations

<h3>Edit Meeting</h3>

@if (meeting == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <EditForm Model="meeting" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label>Organizer Email:</label>
            <InputText @bind-Value="meeting.OrganizerEmail" class="form-control" />
        </div>

        <div class="form-group">
            <label>Title:</label>
            <InputText @bind-Value="meeting.Title" class="form-control" />
        </div>

        <div class="form-group">
            <label>Description:</label>
            <InputText @bind-Value="meeting.Description" class="form-control" />
        </div>

        <div class="form-group">
            <label>Date:</label>
            <InputDate @bind-Value="meeting.Date" class="form-control" />
        </div>

        <div class="form-group">
            <label>Time:</label>
            <InputText @bind-Value="meeting.Time" class="form-control" />
        </div>

        <div class="form-group">
            <label>Invitees (Email Addresses):</label>
            <InputText @bind-Value="newInviteeEmail" class="form-control" />
            <button type="button" @onclick="AddInvitee" class="btn btn-secondary mt-2">Add Email</button>
        </div>

        <ul>
            @foreach (var invitee in meeting.Invitees)
            {
                <li>
                    @invitee.Email
                    <button type="button" @onclick="() => RemoveInvitee(invitee)" class="btn btn-danger btn-sm">Remove</button>
                </li>
            }
        </ul>

        <button type="submit" class="btn btn-primary">Save Changes</button>
    </EditForm>
}

@code {
    [Parameter]
    public int Id { get; set; }

    private Meeting? meeting;
    private string newInviteeEmail;

    protected override async Task OnInitializedAsync()
    {
        var client = ClientFactory.CreateClient("MeetingApi");
        meeting = await client.GetFromJsonAsync<Meeting>($"api/meetings/{Id}");
    }

    private async Task HandleValidSubmit()
    {
        var client = ClientFactory.CreateClient("MeetingApi");
        var response = await client.PutAsJsonAsync($"api/meetings/{Id}", meeting);

        if (response.IsSuccessStatusCode)
        {
            NavigationManager.NavigateTo("/meetings");
        }
        else
        {
            // Handle error response
        }
    }

    private void AddInvitee()
    {
        if (!string.IsNullOrEmpty(newInviteeEmail))
        {
            meeting.Invitees.Add(new Invitee { Email = newInviteeEmail });
            newInviteeEmail = string.Empty;
        }
    }

    private void RemoveInvitee(Invitee invitee)
    {
        meeting.Invitees.Remove(invitee);
    }

    public class Meeting : IValidatableObject
    {
        public int Id { get; set; }

        [Required(ErrorMessage = "Email organizatora je obavezan.")]
        [EmailAddress(ErrorMessage = "Neispravna email adresa.")]
        public string OrganizerEmail { get; set; }

        [Required(ErrorMessage = "Naslov sastanka je obavezan.")]
        public string Title { get; set; }

        [Required(ErrorMessage = "Opis sastanka je obavezan.")]
        public string Description { get; set; }

        [Required(ErrorMessage = "Datum sastanka je obavezan.")]
        public DateTime Date { get; set; }

        [Required(ErrorMessage = "Vrijeme sastanka je obavezno.")]
        public string Time { get; set; }

        public List<Invitee> Invitees { get; set; } = new List<Invitee>();

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        {
            var currentDateTime = DateTime.Now;
            var meetingDateTime = Date.Add(TimeSpan.Parse(Time));

            if (meetingDateTime < currentDateTime)
            {
                yield return new ValidationResult("Datum i vrijeme sastanka moraju biti u budućnosti.", new[] { nameof(Date), nameof(Time) });
            }
        }
    }

    public class Invitee
    {
        [Required(ErrorMessage = "Email sudionika je obavezan.")]
        [EmailAddress(ErrorMessage = "Neispravna email adresa.")]
        public string Email { get; set; }
    }
}
