@page "/meetings"
@inject IHttpClientFactory ClientFactory
@inject NavigationManager NavigationManager

<h3>Meetings</h3>

@if (meetings == null)
{
    <p><em>Loading...</em></p>
}
else if (!meetings.Any())
{
    <p>No meetings found.</p>
}
else
{
    <ul>
        @foreach (var meeting in meetings)
        {
            <li>
                <strong>@meeting.Title</strong> - @meeting.Description <br />
                @meeting.Date.ToShortDateString() @meeting.Time <br />
                <strong>Invitees:</strong>
                <ul>
                    @foreach (var invitee in meeting.Invitees)
                    {
                        <li>
                            @invitee.Email - @invitee.Status
                        </li>
                    }
                </ul>

                <button @onclick="() => EditMeeting(meeting.Id)" class="btn btn-primary btn-sm">Edit</button>
                <button @onclick="() => DeleteMeeting(meeting.Id)" class="btn btn-danger btn-sm">Delete</button>
            </li>
        }
    </ul>
}

@code {
    private List<Meeting>? meetings;

    protected override async Task OnInitializedAsync()
    {
        var client = ClientFactory.CreateClient("MeetingApi");

        try
        {
            meetings = await client.GetFromJsonAsync<List<Meeting>>("api/meetings");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading meetings: {ex.Message}");
        }
    }

    private void EditMeeting(int id)
    {
        NavigationManager.NavigateTo($"/edit-meeting/{id}");
    }

    private async Task DeleteMeeting(int id)
    {
        var client = ClientFactory.CreateClient("MeetingApi");
        var response = await client.DeleteAsync($"api/meetings/{id}");

        if (response.IsSuccessStatusCode)
        {
            // Reload the list of meetings after successful deletion
            meetings = await client.GetFromJsonAsync<List<Meeting>>("api/meetings");
        }
        else
        {
            Console.WriteLine("Error deleting the meeting.");
        }
    }

    public class Meeting
    {
        public int Id { get; set; }  // Id je neophodan za identifikaciju sastanka
        public string OrganizerEmail { get; set; }
        public string Title { get; set; }
        public string Description { get; set; }
        public DateTime Date { get; set; }
        public string Time { get; set; }  // Vreme kao string
        public List<Invitee> Invitees { get; set; } = new List<Invitee>();  // Promjena na listu objekata Invitee
    }

    public class Invitee
    {
        public string Email { get; set; }
        public InvitationStatus Status { get; set; } = InvitationStatus.Pending; // Dodaj ovo svojstvo
    }

    public enum InvitationStatus
    {
        Accepted,
        Declined,
        Pending
    }

}
